\input texinfo
@documentencoding UTF-8

@ifnottex
@paragraphindent 0
@end ifnottex
@titlepage
@title Depthcharge payload
@end titlepage

@node Top
@top Depthcharge payload

@menu
* Depthcharge payload::
* CrOS security model::
* Developer mode screen::
* Recovery mode screen::
* Configuring verified boot parameters::
@end menu

@node Depthcharge payload
@chapter Depthcharge payload
@anchor{#depthcharge-payload}
This section relates to the depthcharge payload used in libreboot.

Or @uref{../index.html,Back to main index}.

@itemize
@item
@ref{#cros_security_model,CrOS security model}
@item
@ref{#developer_mode_screen,Developer mode screen}
@itemize
@item
Holding the developer mode screen
@item
Booting normally
@item
Booting from different mediums
@item
Showing device information
@item
Warnings
@end itemize

@item
@ref{#recovery_mode_screen,Recovery mode screen}
@itemize
@item
@ref{#recovering_bad_state,Recovering from a bad state}
@item
@ref{#enabling_developer_mode,Enabling developer mode}
@end itemize

@item
@ref{#configuring_verified_boot_parameters,Configuring verified boot parameters}
@end itemize

@node CrOS security model
@chapter CrOS security model
@anchor{#cros-security-model}
CrOS (Chromium OS/Chrome OS) devices such as Chromebooks implement a strict security model to ensure that these devices do not become compromised, that is implemented as the verified boot (vboot) reference, most of which is executed within depthcharge. A detailed overview of the CrOS security model is available on the dedicated page.

In spite of the CrOS security model, depthcharge won't allow booting kernels without verifying their signature and booting from external media or legacy payload unless explicitly allowed: see @ref{#configuring_verified_boot_parameters,configuring verified boot parameters}.

@node Developer mode screen
@chapter Developer mode screen
@anchor{#developer-mode-screen}
The developer mode screen can be accessed in depthcharge when developer mode is enabled.@* Developer mode can be enabled from the @ref{#recovery_mode_screen,recovery mode screen}.

It allows booting normally, booting from internal storage, booting from external media (when enabled), booting from legacy payload (when enabled), showing information about the device and disabling developer mode.
@menu
* Holding the developer mode screen::
* Booting normally::
* Booting from different mediums::
* Showing device information::
* Warnings::
@end menu

@node Holding the developer mode screen
@section Holding the developer mode screen
@anchor{#holding-the-developer-mode-screen}
As instructed on the developer mode screen, the screen can be held by pressing @strong{Ctrl + H} in the first 3 seconds after the screen is shown. After that delay, depthcharge will resume booting normally.

@node Booting normally
@section Booting normally
@anchor{#booting-normally}
As instructed on the developer mode screen, a regular boot will happen after @strong{3 seconds} (if developer mode screen is not held).@* The default boot medium (internal storage, external media, legacy payload) is shown on screen.

@node Booting from different mediums
@section Booting from different mediums
@anchor{#booting-from-different-mediums}
Depthcharge allows booting from different mediums, when they are allowed (see @ref{#configuring_verified_boot_parameters,configuring verified boot parameters} to enable or disable boot mediums).@* As instructed on the developer mode screen, booting from various mediums can be triggered by pressing various key combinations:

@itemize
@item
Internal storage: @strong{Ctrl + D}
@item
External media: @strong{Ctrl + U} (when enabled)
@item
Legacy payload: @strong{Ctrl + L} (when enabled)
@end itemize

@node Showing device information
@section Showing device information
@anchor{#showing-device-information}
As instructed on the developer mode screen, showing device information can be triggered by pressing @strong{Ctrl + I} or @strong{Tab}.@* Various information is shown, including vboot non-volatile data, TPM status, GBB flags and key hashes.@*

@node Warnings
@section Warnings
@anchor{#warnings}
The developer mode screen will show warnings when:

@itemize
@item
Booting kernels without verifying their signature is enabled
@item
Booting from external media is enabled
@item
Booting legacy payloads is enabled
@end itemize

@node Recovery mode screen
@chapter Recovery mode screen
@anchor{#recovery-mode-screen}
The recovery mode screen can be accessed in depthcharge, by pressing @strong{Escape + Refresh + Power} when the device is off.

It allows recovering the device from a bad state by booting from a trusted recovery media. When accessed with the device in a good state, it also allows enabling developer mode.
@menu
* Recovering from a bad state::
* Enabling developer mode::
@end menu

@node Recovering from a bad state
@section Recovering from a bad state
@anchor{#recovering-from-a-bad-state}
When the device fails to verify the signature of a piece of the boot software or when an error occurs, it is considered to be in a bad state and will instruct the user to reboot to recovery mode.@* Recovery mode boots using only software located in write-protected memory, that is considered to be trusted and safe.

Recovery mode then allows recovering the device by booting from a trusted recovery media, that is automatically detected when recovery mode starts. When no external media is found or when the recovery media is invalid, instructions are shown on screen. @* Trusted recovery media are external media (USB drives, SD cards, etc) that hold a kernel signed with the recovery key.

Google provides images of such recovery media for Chrome OS (which are not advised to users as they contain proprietary software). @* They are signed with Google's recovery keys, that are pre-installed on the device when it ships.

When replacing the full flash of the device, the pre-installed keys are replaced. When the recovery private key is available (e.g. when using self-generated keys), it can be used to sign a kernel for recovery purposes.

@node Enabling developer mode
@section Enabling developer mode
@anchor{#enabling-developer-mode}
As instructed on the recovery mode screen, developer mode can be enabled by pressing @strong{Ctrl + D}.@* Instructions to confirm enabling developer mode are then shown on screen.

@node Configuring verified boot parameters
@chapter Configuring verified boot parameters
@anchor{#configuring-verified-boot-parameters}
Depthcharge's behavior relies on the verified boot (vboot) reference implementation, that can be configured with parameters stored in the verified boot non-volatile storage.@* These parameters can be modified with the @strong{crossystem} tool, that requires sufficient privileges to access the verified boot non-volatile storage.

@strong{crossystem} relies on @strong{mosys}, that is used to access the verified boot non-volatile storage on some devices. @strong{crossystem} and @strong{mosys} are both free software and their source code is made available by Google: @uref{https://chromium.googlesource.com/chromiumos/platform/vboot_reference/,crossystem}. @uref{https://chromium.googlesource.com/chromiumos/platform/mosys/,mosys}.@* These tools are not distributed along with Libreboot yet. However, they are preinstalled on the device, with ChromeOS.

Some of these parameters have the potential of @strong{weakening the security of the device}. In particular, disabling kernels signature verification, external media boot and legacy payload boot can weaken the security of the device.

The following parameters can be configured:

@itemize
@item
Kernels signature verification:
@itemize
@item
Enabled with:@* # @strong{crossystem dev_boot_signed_only=1}
@item
Disabled with:@* # @strong{crossystem dev_boot_signed_only=0}
@end itemize

@item
External media boot:
@itemize
@item
Enabled with:@* # @strong{crossystem dev_boot_usb=1}
@item
Disabled with:@* # @strong{crossystem dev_boot_usb=0}
@end itemize

@item
Legacy payload boot:
@itemize
@item
Enabled with:@* # @strong{crossystem dev_boot_legacy=1}
@item
Disabled with:@* # @strong{crossystem dev_boot_legacy=0}
@end itemize

@item
Default boot medium:
@itemize
@item
Internal storage:@* # @strong{crossystem dev_default_boot=disk}
@item
External media:@* # @strong{crossystem dev_default_boot=usb}
@item
Legacy payload:@* # @strong{crossystem dev_default_boot=legacy}
@end itemize

@end itemize

Copyright Â© 2015 Paul Kocialkowski <contact@@paulk.fr>@* Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license can be found at @uref{../gfdl-1.3.txt,../gfdl-1.3.txt}

Updated versions of the license (when available) can be found at @uref{https://www.gnu.org/licenses/licenses.html,https://www.gnu.org/licenses/licenses.html}

UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.

TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.

The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.

@bye
