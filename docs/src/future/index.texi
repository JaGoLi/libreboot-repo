\input texinfo
@documentencoding UTF-8

@ifnottex
@paragraphindent 0
@end ifnottex
@titlepage
@title libreboot tutorials
@end titlepage

@node Top
@top libreboot tutorials

@menu
* Development notes::
* Table of contents::
* standard test::
* T60 cpu microcode::
* i945 VRAM size::
* LCD panels on i945 - fix incompatible panels::
* i945 gfx X60/T60 VBT implementation experimental testing::
* intelvbttool test results VGA ROM dumps::
* Fallback patches::
* Other - unlisted low priority::
@end menu

@node Development notes
@chapter Development notes
@anchor{#development-notes}
These are development notes, for future use. For old (obselete) notes, see @uref{old.html,old.html}.

Or go @uref{../tasks.html,back to main task list}.

@node Table of contents
@chapter Table of contents
@anchor{#table-of-contents}
@itemize
@item
@ref{#standard_test,Standard test}
@item
@ref{#t60_cpu_microcode,T60 cpu microcode}
@item
@ref{#i945_vram_size,i945 VRAM size}
@item
@ref{#lcd_i945_incompatibility,LCD panels on i945 - fix incompatible panels}
@item
@ref{#i945_vbt,i945 X60/T60 VBT implementation (experimental: testing)}
@item
@ref{#intelvbttool_results,IntelVbtTool results}
@item
@ref{#fallback_patches,Fallback patches for i945}
@end itemize

@node standard test
@chapter standard test
@anchor{#standard-test}
These logs are usually obtained when testing changes related to graphics on i945 (X60 and T60).

@itemize
@item
Make a copy of these files:
@itemize
@item
/var/log/dmesg
@item
/var/log/kern.log
@item
/var/log/Xorg.0.log
@item
/proc/ioports
@item
/proc/iomem
@item
/sys/class/drm/card0/error
@end itemize

@item
Record these outputs:
@itemize
@item
sudo intel_reg_dumper
@item
uname -r
@item
lspci -vvvvnnnnxxxx
@item
sudo modprobe msr
@item
sudo inteltool -a
@item
sudo cbmem -c
@end itemize

@item
Try some 3D games with latest kernel.
@end itemize

@ref{#pagetop,Back to top of page.}

@node T60 cpu microcode
@chapter T60 cpu microcode
@anchor{#t60-cpu-microcode}
TODO: T60: find (for rare buggy CPUs that are unstable without microcode updates) if there is a workaround (patched kernel, special parameter, etc) So far, only 1 processor has been found to have issues. See microcode errata sheets http://download.intel.com/design/mobile/SPECUPDT/31407918.pdf and http://download.intel.com/design/mobile/SPECUPDT/30922214.pdf and then look at the debugging results collected in @uref{../resources/images/t7200q,t7200q} directory (q means quirk).

Every other T7200 tested so far has worked without microcode updates.

@ref{#pagetop,Back to top of page.}

@node i945 VRAM size
@chapter i945 VRAM size
@anchor{#i945-vram-size}
Apparently, only 8MB VRAM is available on i945 GPUs (though it could do 64MB):@* phcoder: No. Hardware default is 8 MiB. When I wanted to make it configurable, I saw that docs mention only one other alternative: 1MiB. Later isn't event enough for 1024x768 at 24bpp without any acceleration or double buffering. It's possible that there are undocumented values. Which options do you have in vendor BIOS? How to find out how much vram you have:@* phcoder: TOM - BSM@* phcoder: check what vendor BIOS offers as options@* vimuser: I thought it could do 64MB usually@* phcoder: not accorging to doc.@* phcoder: see mobile-945-express-chipset-datasheet page 93@* phcoder: see also src/northbridge/intel/i945/@{early_init,northbridge,gma@}.c@* vimuser: "011 = DVMT (UMA) mode, 8 MB of memory pre-allocated for@* vimuser: frame buffer."@* vimuser: "Others - reserved"@* phcoder: the easiest way is a loop at this position which tries different values and reads (and prints) BSM with them@* stefanct: vimuser: they suggest that you change the value and look how BSM reacts to that@* stefanct: as they pointed out earlier vram size = TOM - BSM@* stefanct: different values of GMS@* stefanct: phcoder: hm... this could be a hint. look at the text description of TOLUD at page 103@* stefanct: it mentions 64 MB in the text about BSM as well@* stefanct: table 18...@* phcoder: stefanct: I have a guess which value make is 64 but I will not tell to avoid skewing test results@* stefanct: phcoder: sure... i assumed you were not sure if it supports it at all. testing it properly is of course a good idea :)@* stefanct: test the various possible (but reserved) values of GMS and see what the resulting VRAM size is@* vimuser: so, TOM - BSM

@ref{#pagetop,Back to top of page.}

@node LCD panels on i945 - fix incompatible panels
@chapter LCD panels on i945 - fix incompatible panels
@anchor{#lcd-panels-on-i945---fix-incompatible-panels}
Fix T60 issues (see incompatible panels listed at @uref{../hcl/index.html#supported_t60_list,../hcl/index.html#supported_t60_list}).

Run that tool (resources/utilities/i945gpu/intel-regs.py) as root on systems with the offending panels in:

@itemize
@item
Coreboot (or libreboot, whatever) with VBIOS (disable native graphics also)
@item
(Factory BIOS also?)
@end itemize

This shows values in devicetree.cb and src/northbridge/intel/i945/gma.c, the idea is that you run it on factory bios or vbios and that it will (might) show different values: then you try those in the native graphics (in libreboot).

Other values/registers might also need to be added to the script for these tests.

check if intel_bios_reader from intel-gpu-tools reports the same value (BIOS has a hardcoded value) for PWM modulation frequency. This file can read the VBIOS (64K dump).

Check other tools in intel-gpu-tools aswell, compare outputs. Possibly add more information to intel-regs.py output (submit changes to mtjm). Do oprom trace / replay (@uref{http://www.coreboot.org/User:GNUtoo#How_to_get_rid_of_the_vbios_of_the_x60_.5BNew_Version.5D,http://www.coreboot.org/User:GNUtoo#How_to_get_rid_of_the_vbios_of_the_x60_.5BNew_Version.5D})

Study how EDID works and how gma.c handles it.

Original getregs.py script can be found at @uref{http://hg.mtjm.eu/scripts/file/tip/intel-regs.py,http://hg.mtjm.eu/scripts/file/tip/intel-regs.py} written by Michał Masłowski.

About fixing remaining LCD panels on 5345:@* 'polarity' is mentioned in coreboot log (cbmem -c). compare output (with working and non-working panel). (and see the other notes in future/index.html)

There was a theory that working panels are 6bpc (bits per colour) and nonworking are 8bpc, but all EDIDs that we have here are for 6bpc panels.

We should compare coreboot logs (from @code{cbmem -c} from systems with working and nonworking panels.

How to dump EDID:

# @strong{apt-get install i2c-tools}@* # @strong{modprobe i2c-dev}@* Find out the correct ID to use:@* # @strong{i2cdetect -l}@* Example:@* # @strong{i2cdump -y 2 0x50}

Working panel: EDID dump from LG-Philips LP150E05-A2K1:

@verbatim
No size specified (using byte-data access)
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f    0123456789abcdef
00: XX ff ff ff ff ff ff 00 30 ae 43 40 00 00 00 00    X.......0?C@....
10: 00 0f 01 03 80 1e 17 78 ea af 00 99 58 53 8c 2a    .??????x??.?XS?*
20: 25 50 54 21 08 00 81 80 01 01 01 01 01 01 01 01    %PT!?.??????????
30: 01 01 01 01 01 01 30 2a 78 20 51 1a 10 40 30 70    ??????0*x Q??@0p
40: 13 00 31 e4 10 00 00 18 28 23 78 20 51 1a 10 40    ?.1??..?(#x Q??@
50: 30 70 13 00 31 e4 10 00 00 18 00 00 00 0f 00 90    0p?.1??..?...?.?
60: 43 32 90 43 28 14 06 00 32 0c 00 00 00 00 00 fe    C2?C(??.2?.....?
70: 00 4c 50 31 35 30 45 30 35 2d 41 32 0a 20 00 9b    .LP150E05-A2? .?
80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
90: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
a0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
b0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
c0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
d0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
e0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
f0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
@end verbatim

Working panel: EDID dump from Boe-Hydis HT14P12-100 FRU: 13N7061 (Inverter FRU: 41W1010)

@verbatim
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f    0123456789abcdef
00: 00 ff ff ff ff ff ff 00 30 ae 22 40 00 00 00 00    ........0?"@....
10: 00 0f 01 03 80 1c 15 78 ea af 40 95 56 4a 8f 25    .??????x??@?VJ?%
20: 20 50 54 21 08 00 81 80 01 01 01 01 01 01 01 01     PT!?.??????????
30: 01 01 01 01 01 01 30 2a 78 20 51 1a 10 40 30 70    ??????0*x Q??@0p
40: 13 00 1d d6 10 00 00 19 25 23 78 20 51 1a 10 40    ?.???..?%#x Q??@
50: 30 70 13 00 1d d6 10 00 00 19 00 00 00 0f 00 90    0p?.???..?...?.?
60: 43 32 90 43 28 0f 01 00 09 e5 00 00 00 00 00 fe    C2?C(??.??.....?
70: 00 48 54 31 34 50 31 32 2d 31 30 30 0a 20 00 3f    .HT14P12-100? .?
80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
90: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
a0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
b0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
c0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
d0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
e0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
f0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
@end verbatim

LTN141XA-L01: revert to libreboot git commit c943281 to see this

@strong{Non-}working panel: EDID dump from Samsung LTN150XG-L08:

@verbatim
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f    0123456789abcdef
00: 00 ff ff ff ff ff ff 00 30 ae 40 40 00 00 00 00    ........0?@@....
10: 00 0f 01 03 80 1f 17 78 ea 2d 05 97 57 51 8a 27    .??????x?-??WQ?'
20: 23 50 54 21 08 00 01 01 01 01 01 01 01 01 01 01    #PT!?.??????????
30: 01 01 01 01 01 01 64 19 00 40 41 00 26 30 18 88    ??????d?.@A.&0??
40: 36 00 30 e4 10 00 00 19 28 15 00 40 41 00 26 30    6.0??..?(?.@A.&0
50: 18 88 36 00 30 e4 10 00 00 19 00 00 00 0f 00 61    ??6.0??..?...?.a
60: 43 32 61 43 28 14 01 00 4c a3 58 47 00 00 00 fe    C2aC(??.L?XG...?
70: 00 4c 54 4e 31 35 30 58 47 2d 4c 30 38 0a 00 6d    .LTN150XG-L08?.m
80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
90: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
a0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
b0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
c0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
d0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
e0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
f0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
@end verbatim

@ref{#pagetop,Back to top of page.}

@node i945 gfx X60/T60 VBT implementation experimental testing
@chapter i945 gfx: X60/T60 VBT implementation (experimental: testing)
@anchor{#i945-gfx-x60t60-vbt-implementation-experimental-testing}
intel_bios_dumper in intel-gpu-tools seems interesting.

@strong{Use 'drm.debug=0x06' kernel parameter when booting in grub!}

Before each test run, boot a live USB and delete the old logs in /var/log (kernel log, xorg log, dmesg and so on).

Load (from the ROM) the runningvga.bin for each LCD panel on each system; do not execute it, only load it! (coreboot will have to be modified). Rename the ROM appropriately, based on the system name and the panel name. coreboot_nativegfx_5868_plusrunningvga_t60_14_LTD141ECMB.rom, for instance. Keep a copy for later use.

You are supposed to:

@itemize
@item
enable native graphics in menuconfig
@item
include the self-modified VGA ROM (load, but not execute) - for reverse engineering the correct VBT tables.
@end itemize

With each boot, make notes about what you see and get logs using the @ref{#standard_test,standard test}. You will need the files from @ref{#intelvbttool_results,#intelvbttool_results} for each system.

Results (# means untested):

@itemize
@item
@strong{X60/X60s:}
@itemize
@item
TMD-Toshiba LTD121ECHB: #
@item
CMO N121X5-L06: #
@item
Samsung LTN121XJ-L07: #
@item
BOE-Hydis HT121X01-101: #
@end itemize

@item
@strong{X60T XGA:}
@itemize
@item
BOE-Hydis HV121X03-100: #
@end itemize

@item
@strong{X60T SXGA+:}
@itemize
@item
BOE-Hydis HV121P01-100: #
@end itemize

@item
@strong{T60 14" XGA:}
@itemize
@item
Samsung LTN141XA-L01: #
@item
CMO N141XC: #
@item
BOE-Hydis HT14X14: #
@item
TMD-Toshiba LTD141ECMB: #
@end itemize

@item
@strong{T60 14" SXGA+}
@itemize
@item
TMD-Toshiba LTD141EN9B: #
@item
Samsung LTN141P4-L02: #
@item
Boe-Hydis HT14P12: #
@end itemize

@item
@strong{T60 15" XGA}
@itemize
@item
Samsung LTN150XG-L08: #
@item
LG-Philips LP150X09: #
@item
13N7068 (IDtech): #
@item
13N7069 (CMO): #
@end itemize

@item
@strong{T60 15" SXGA+}
@itemize
@item
LG-Philips LP150E05-A2K1: #
@item
BOE-Hydis HV150P01-100: #
@end itemize

@item
@strong{T60 15" UXGA}
@itemize
@item
BOE-Hydis HV150UX1-100: #
@item
IDTech N150U3-L01: #
@item
BOE-Hydis HV150UX1-102: #
@end itemize

@item
@strong{T50 15" QXGA}
@itemize
@item
IDtech IAQX10N: #
@item
IDtech IAQX10S: #
@end itemize

@end itemize

@ref{#pagetop,Back to top of page}

@node intelvbttool test results VGA ROM dumps
@chapter intelvbttool test results (VGA ROM dumps)
@anchor{#intelvbttool-test-results-vga-rom-dumps}
The VBIOS on i945 (intel gpu) platforms is self-modifying; that is, its contents change when you run it. intelvbttool takes a dump of the currently running vbios, and parses it.

The idea is that we can extract the VBT tables using this knowledge, on the X60, X60 Tablet and T60 (Intel GPU).

Here is an example of how VBT was implemented on the ThinkPad X230: @uref{http://review.coreboot.org/#/c/5396,http://review.coreboot.org/#/c/5396}.

You'll need to build a T60 ROM with SeaBIOS and the VGA ROM (for Intel GPU). An X60 ROM is also needed (same configuration, using the VGA ROM for X60).

T60 has DVI on its dock, make sure that the dock is attached when getting this output.

Get intelvbttool here: @uref{http://review.coreboot.org/#/c/5842,http://review.coreboot.org/#/c/5842} (util/intelvbttool).

Now dump a copy of the running VGA BIOS: @strong{$ sudo dd if=/dev/mem bs=64k of=runningvga.bin skip=12 count=1}@* Then do (and record the output):@* @strong{$ ./intelvbttool runningvga.bin > intelvbttool_out}

Backup both files (runningvga.bin and intelvbttool_out), renaming them to match the system and LCD panel used. @uref{../misc/index.html#get_edid_panelname,../misc/index.html#get_edid_panelname} will show you how to get the name (model) of the LCD panel used.
@menu
* Test results # means untested and all had docks unless noted::
@end menu

@node Test results # means untested and all had docks unless noted
@section Test results (# means untested and all had docks, unless noted).
@anchor{#test-results-means-untested-and-all-had-docks-unless-noted.}
@itemize
@item
@strong{X60/X60s:}
@itemize
@item
TMD-Toshiba LTD121ECHB: #
@item
CMO N121X5-L06: #
@item
Samsung LTN121XJ-L07: #
@item
BOE-Hydis HT121X01-101: #
@end itemize

@item
@strong{X60T XGA (1024x768):}
@itemize
@item
BOE-Hydis HV121X03-100: #
@end itemize

@item
@strong{X60T SXGA+ (1400x1050):}
@itemize
@item
BOE-Hydis HV121P01-100: #
@end itemize

@item
@strong{T60 14" XGA (1024x768):}
@itemize
@item
Samsung LTN141XA-L01: #
@item
CMO N141XC: #
@item
BOE-Hydis HT14X14: #
@item
TMD-Toshiba LTD141ECMB: #
@end itemize

@item
@strong{T60 14" SXGA+ (1400x1050):}
@itemize
@item
TMD-Toshiba LTD141EN9B: #
@item
Samsung LTN141P4-L02: #
@item
Boe-Hydis HT14P12: #
@end itemize

@item
@strong{T60 15" XGA (1024x768):}
@itemize
@item
Samsung LTN150XG-L08: #
@item
LG-Philips LP150X09: #
@item
13N7068 (IDtech): #
@item
13N7069 (CMO): #
@end itemize

@item
@strong{T60 15" SXGA+ (1400x1050):}
@itemize
@item
LG-Philips LP150E05-A2K1: #
@item
BOE-Hydis HV150P01-100: #
@end itemize

@item
@strong{T60 15" UXGA (1600x1200):}
@itemize
@item
BOE-Hydis HV150UX1-100: #
@item
IDTech N150U3-L01: #
@item
BOE-Hydis HV150UX1-102: #
@end itemize

@item
@strong{T60 15" QXGA (2048x1536):}
@itemize
@item
IDtech IAQX10N: #
@item
IDtech IAQX10S: #
@end itemize

@end itemize

@ref{#pagetop,Back to top of page.}

@node Fallback patches
@chapter Fallback patches
@anchor{#fallback-patches}
@itemize
@item
Todo: test gnutoo's fallback patches: @uref{http://www.coreboot.org/Fallback_mechanism,http://www.coreboot.org/Fallback_mechanism} (some parts use systemd. adapt for upstart, which is what trisquel uses)@* see @uref{gnutoo_fallback_patch,this IRC log} (warning, not cleaned up)
@end itemize

@ref{#pagetop,Back to top of page.}

@node Other - unlisted low priority
@chapter Other - unlisted (low priority)
@anchor{#other---unlisted-low-priority}
@itemize
@item
PTE errors still exist on i945 with 6718 (which is merged). @uref{http://review.coreboot.org/#/c/6718/,http://review.coreboot.org/#/c/6718/}
@itemize
@item
@uref{../resources/misc/dumps/pte_x60_6718/dmesg,dmesg}
@item
@uref{../resources/misc/dumps/pte_x60_6718/kern.log,kern.log}
@item
This doesn't seem to cause any issues for general use.
@end itemize

@item
Implement INT 10H support in i945 native graphics. (this will be a lot of work. SeaBIOS has code for some geode boards, to get a general idea).
@item
T60 15" QXGA (2048x1536): fixed issue where GRUB wouldn't show any graphics. (Not many people have this panel)
@itemize
@item
It might be the same issue I ran into with Paul on the X60 (not enough memory being allocated) since the same code works on T60 SXGA+ and UXGA, where GRUB actually display graphics.
@end itemize

@end itemize

@ref{#pagetop,Back to top of page.}

Copyright © 2014, 2015 Leah Woods <info@@minifree.org>@* Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license can be found at @uref{../resources/licenses/gfdl-1.3.txt,gfdl-1.3.txt}

Updated versions of the license (when available) can be found at @uref{https://www.gnu.org/licenses/licenses.html,https://www.gnu.org/licenses/licenses.html}

UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.

TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.

The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.

@bye
