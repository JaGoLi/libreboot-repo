#!/bin/bash

#  buildrom-withgrub script: this generically builds the ROM images.
#  The ROM images built by this script will use the GRUB payload.
#
#	Copyright (C) 2014 Francis Rowe <info@gluglug.org.uk>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

set -u -e -v

if (( $# != 1 )); then
	echo "Usage: ./buildrom-withgrub boardname"
	echo "Example: ./buildrom-withgrub x60"
	echo "You need to specify exactly 1 argument"
	exit 1
fi

cd coreboot

# Build ROM images with text-mode and corebootfb modes.
# ---------------------------------------------------------------------------------------------------------------

for romtype in txtmode vesafb
do
	# Build the GRUB payload (ELF executable)
	# and add it to coreboot directory:
	cd ../resources/utilities/grub-assemble
	./gen."$romtype".sh
	rm -rf ../../../coreboot/grub.elf
	mv grub.elf ../../../coreboot/
	cd ../../../coreboot

	# Build coreboot ROM image
	rm -rf .config
	make clean
	cp ../resources/libreboot/config/"$1"/config .config
	if [ "$romtype" = "vesafb" ]
		then
			mv .config config_txtmode
			sed 's/# CONFIG_FRAMEBUFFER_KEEP_VESA_MODE is not set/CONFIG_FRAMEBUFFER_KEEP_VESA_MODE=y/' < config_txtmode > .config
			rm -rf config_txtmode
	fi
	make
	mv build/coreboot.rom "$1"_"$romtype".rom
	# .config no longer needed
	rm -rf .config

	# Needed on i945 systems for the bucts/dd trick (documented)
	# This enables the ROM to be flashed over the lenovo bios firmware
	if [ "$1" = "x60" ] || [ "$1" = "x60t" ] || [ "$1" = "t60" ]
		then
			dd if="$1"_"$romtype".rom of=top64k.bin bs=1 skip=$[$(stat -c %s "$1"_"$romtype".rom) - 0x10000] count=64k
			dd if=top64k.bin of="$1"_"$romtype".rom bs=1 seek=$[$(stat -c %s "$1"_"$romtype".rom) - 0x20000] count=64k conv=notrunc
			rm -rf top64k.bin
	fi

	# Generate each type of GRUB configuration for this type of ROM image
	for keymap in $(ls ../resources/utilities/grub-assemble/keymap/original)
	do
		# copy the images based on the keymap
		cp "$1"_"$romtype".rom "$1"_"$keymap"_"$romtype".rom

		# generate the correct grub config
		touch grub_"$keymap"_"$romtype".cfg
		# generate contents:
		cat ../resources/grub/config/extra/common.cfg >> grub_"$keymap"_"$romtype".cfg
		cat ../resources/grub/config/extra/"$romtype".cfg >> grub_"$keymap"_"$romtype".cfg
		echo "keymap $keymap" >> grub_"$keymap"_"$romtype".cfg
		cat ../resources/grub/config/menuentries/common.cfg >> grub_"$keymap"_"$romtype".cfg
		cat ../resources/grub/config/menuentries/"$romtype".cfg >> grub_"$keymap"_"$romtype".cfg

		# Insert grub config into the image
		./util/cbfstool/cbfstool "$1"_"$keymap"_"$romtype".rom add -f grub_"$keymap"_"$romtype".cfg -n grub.cfg -t raw

		# grubtest.cfg should be able to switch back to grub.cfg
		sed 's/grubtest.cfg/grub.cfg/' < grub_"$keymap"_"$romtype".cfg > grub_"$keymap"_"$romtype"_test.cfg

		# Insert grub test config into the image (for the user to test modifications to before modifying the main one)
		./util/cbfstool/cbfstool "$1"_"$keymap"_"$romtype".rom add -f grub_"$keymap"_"$romtype"_test.cfg -n grubtest.cfg -t raw
	done

	rm -rf "$1"_"$romtype".rom
done

# Now we clean up and prepare the bin directory containing all the images
# ----------------------------------------------------------------------------------------------------------------------------

# we don't need the grub configs anymore
rm -rf grub*cfg

# prepare directory for new ROM images
rm -rf "$1"
mkdir "$1"
# move the ROM's into the newly created directory
mv "$1"*rom "$1"

# delete the old ROM's from ../bin
rm -rf ../bin/"$1"
# now put the new ROM's in ./bin
mv "$1" ../bin

# go back to main source directory
cd ../

