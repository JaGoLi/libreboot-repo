#!/bin/bash

#
#  build-release script: generates libreboot_bin and libreboot_src release archives
#
#	Copyright (C) 2014 Francis Rowe <info@gluglug.org.uk>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

set -u -e -v

if [ $(uname -i) = "i686" ] || [ $(uname -m) = "i686" ]
	then
		echo "Running on i686. ok."
		sleep 5
elif [ $(uname -i) = "x86_64" ] || [ $(uname -m) = "x86_64" ]
	then
		echo "Running on x86_64. ok."
		sleep 5
else
	echo "This script must be run on an i686 or x86_64 host. x86_64 is recommended."
	exit 1
fi

# MAKE SURE THAT YOU RAN "buildall" OR "builddeps" *AT LEAST ONCE*
# You should also run the 'build' script before running this 

# ### Delete old archives before continuing
# ----------------------------------------------------------------------------------------------------------------------------

echo "Deleting old release archives"

rm -f libreboot_src.tar.xz
rm -f libreboot_bin.tar.xz

# Get manifest which will be used to copy everything
ls > releasefilelist

# ### Prepare libreboot_src archive ready for release
# ----------------------------------------------------------------------------------------------------------------------------

echo "Preparing libreboot_src release archive"

mkdir libreboot_src

for resource in $(cat releasefilelist)
do
	cp -r $resource libreboot_src
done

cd libreboot_src/

# clean everything
./cleandeps

# back to main checkout directory
cd ../

# ### Further work in libreboot_src: delete *.git and *.svn
# ### To save space since they are not useful in the release archives
# ### Changes to these projects should be submitted upstream
# ----------------------------------------------------------------------------------------------------------------------------

cd libreboot_src/

# These instructions will also work even if .git or .svn are already deleted
# because "rm -rf" won't complain if they are missing. It is still useful on
# the release archives (non-git), for example if the user re-downloads these programmes.

# remove .git for libreboot project itself
rm -rf .git*

# # bucts needs .git to stay, otherwise it won't compile
# # We don't need .git* (please submit all upstreamable changes directly to bucts upstream)
# # removing them, to reduce the size of the archive
# cd bucts
# rm -rf .git
# rm -rf .gitignore
# cd ../
# # it was found to cause issues when deleting:
# # GIT_DISCOVERY_ACROSS_FILESYSTEM not set

# coreboot:
# the instructions for coreboot remain in getgb script
# they need to stay there, because otherwise "git diff"
# will show the blobs that were deleted (which means,
# that libreboot would be distributing blobs)

# Flashrom:
cd flashrom/
rm -rf .svn
cd ../

# GRUB:
cd grub/
rm -rf .git
rm -f .gitignore
cd ../

# SeaBIOS:
cd seabios/
rm -rf .git
rm -f .gitignore
cd ../

cd ../

# ### Prepare libreboot_bin archive ready for release
# ----------------------------------------------------------------------------------------------------------------------------

echo "Preparing libreboot_bin release archive"

mkdir libreboot_bin

# ---------------------------------------
# Include the ROM's in the binary archive
# ---------------------------------------
cp -r bin libreboot_bin/

# ---------------
# SeaBIOS related
# ---------------
# Include SeaBIOS and SeaVGABIOS option ROM in the binary archive
cp seabios/out/vgabios.bin libreboot_bin/
cp seabios/out/bios.bin.elf libreboot_bin/
# Add the script for it
cp addseabios libreboot_bin/
# Menu entry to be added to grub configs
cp resources/grub/config/seabios.cfg libreboot_bin/

# --------------
# BUC.TS related
# --------------
# X60/T60: BUC.TS utility is needed to flash libreboot while Lenovo BIOS is running
# Include it statically compiled
cp -r bucts bucts_
cd bucts/
# make it statically compile
git apply ../resources/bucts/patch/staticlink.diff
make clean
make
mkdir ../libreboot_bin/bucts
if [ $(uname -i) = "i686" ] || [ $(uname -m) = "i686" ]
	then
		mkdir ../libreboot_bin/bucts/i686
		mv bucts ../libreboot_bin/bucts/i686
elif [ $(uname -i) = "x86_64" ] || [ $(uname -m) = "x86_64" ]
	then
		mkdir ../libreboot_bin/bucts/x86_64
		mv bucts ../libreboot_bin/bucts/x86_64
fi
cd ../
rm -rf bucts
mv bucts_ bucts

# ----------------
# Flashrom related
# ----------------
# Flashrom is used to install libreboot on supported targets
# Include it statically compiled
cp -r flashrom flashrom_
# make it statically compile
./builddeps-flashrom static
mkdir libreboot_bin/flashrom
cd flashrom/
if [ $(uname -i) = "i686" ] || [ $(uname -m) = "i686" ]
	then
		mkdir ../libreboot_bin/flashrom/i686
		mv flashrom ../libreboot_bin/flashrom/i686
		mv flashrom_lenovobios_sst ../libreboot_bin/flashrom/i686
		mv flashrom_lenovobios_macronix ../libreboot_bin/flashrom/i686
elif [ $(uname -i) = "x86_64" ] || [ $(uname -m) = "x86_64" ]
	then
		mkdir ../libreboot_bin/flashrom/x86_64
		mv flashrom ../libreboot_bin/flashrom/x86_64
		mv flashrom_lenovobios_sst ../libreboot_bin/flashrom/x86_64
		mv flashrom_lenovobios_macronix ../libreboot_bin/flashrom/x86_64
fi
cd ../
rm -rf flashrom
mv flashrom_ flashrom

# ----------------
# cbfstool related
# ----------------
# build cbfstool, compiled (statically linked) and include the binary
cd coreboot/util/
cp -r cbfstool cbfstool_
cd cbfstool/
make clean
make SHARED=0 CC='gcc -static'
mkdir ../../../libreboot_bin/cbfstool
if [ $(uname -i) = "i686" ] || [ $(uname -m) = "i686" ]
	then
		# User is building on 32-bit host. Build only 32-bit binaries
		mkdir ../../../libreboot_bin/cbfstool/i686
		mv cbfstool ../../../libreboot_bin/cbfstool/i686/
		mv rmodtool ../../../libreboot_bin/cbfstool/i686/
elif [ $(uname -i) = "x86_64" ] || $(uname -m) = "x86_64"
	then
		# Build the 64-bit binaries
		mkdir ../../../libreboot_bin/cbfstool/x86_64
		mv cbfstool ../../../libreboot_bin/cbfstool/x86_64/
		mv rmodtool ../../../libreboot_bin/cbfstool/x86_64/
		# Now build 32-bit binaries
		make clean
		make SHARED=0 CC='gcc -static -m32'
		mkdir ../../../libreboot_bin/cbfstool/i686
		mv cbfstool ../../../libreboot_bin/cbfstool/i686/
		mv rmodtool ../../../libreboot_bin/cbfstool/i686/
fi
cd ../
rm -rf cbfstool
mv cbfstool_ cbfstool
cd ../../

# ----------------
# ich9deblob related
# ----------------
# build ich9deblob, compiled (statically linked) and include the binary
cd resources/utilities/
cp -r ich9deblob ich9deblob_
cd ich9deblob/
rm -f ich9deblob
gcc -static -o ich9deblob ich9deblob.c ich9desc.c -I.
mkdir ../../../libreboot_bin/ich9deblob
if [ $(uname -i) = "i686" ] || [ $(uname -m) = "i686" ]
	then
		# User is building on 32-bit host. Build only 32-bit binaries
		mkdir ../../../libreboot_bin/ich9deblob/i686
		mv ich9deblob ../../../libreboot_bin/ich9deblob/i686/
elif [ $(uname -i) = "x86_64" ] || $(uname -m) = "x86_64"
	then
		# Build the 64-bit binaries
		mkdir ../../../libreboot_bin/ich9deblob/x86_64
		mv ich9deblob ../../../libreboot_bin/ich9deblob/x86_64/
		# Now build 32-bit binaries
		gcc -static -m32 -o ich9deblob ich9deblob.c ich9desc.c -I.
		mkdir ../../../libreboot_bin/ich9deblob/i686
		mv ich9deblob ../../../libreboot_bin/ich9deblob/i686/
fi
cd ../
rm -rf ich9deblob
mv ich9deblob_ ich9deblob
cd ../../

# -----------------
# nvramtool related
# -----------------
# build nvramtool, compiled (statically linked) and include the binary
cd coreboot/util/
cp -r nvramtool nvramtool_
cd nvramtool
make clean
make SHARED=0 CC='gcc -static'
mkdir ../../../libreboot_bin/nvramtool
if [ $(uname -i) = "i686" ] || [ $(uname -m) = "i686" ]
	then
		# User is building on 32-bit host. Build only 32-bit binaries
		mkdir ../../../libreboot_bin/nvramtool/i686
		mv nvramtool ../../../libreboot_bin/nvramtool/i686/
elif [ $(uname -i) = "x86_64" ] || $(uname -m) = "x86_64"
	then
		# Build the 64-bit binaries
		mkdir ../../../libreboot_bin/nvramtool/x86_64
		mv nvramtool ../../../libreboot_bin/nvramtool/x86_64/
		# Now build 32-bit binaries
		make clean
		make SHARED=0 CC='gcc -static -m32'
		mkdir ../../../libreboot_bin/nvramtool/i686
		mv nvramtool ../../../libreboot_bin/nvramtool/i686/
fi
cd ../
rm -rf nvramtool
mv nvramtool_ nvramtool
cd ../../

# ---------------------
# Include documentation
# ---------------------
cp -r docs libreboot_bin/

# -----------------------------------------------------------------------
# X60/X60T/T60: Script for setting up powertop (kills high pitched noise)
# -----------------------------------------------------------------------
cp powertop.trisquel6 libreboot_bin/
cp powertop.trisquel6.init libreboot_bin/
cp powertop.trisquel7 libreboot_bin/
cp powertop.trisquel7.init libreboot_bin/

# -------------
# Miscellaneous
# -------------
# include X60 cmos.layout file
cp coreboot/src/mainboard/lenovo/x60/cmos.layout libreboot_bin/x60cmos.layout
cp coreboot/src/mainboard/lenovo/t60/cmos.layout libreboot_bin/t60cmos.layout
cp coreboot/src/mainboard/apple/macbook21/cmos.layout libreboot_bin/macbook21cmos.layout

# FLASHING SCRIPTS
# Flashrom script (makes flashing easier: ./flash path/to/libreboot.rom)
cp flash libreboot_bin/
# For those upgrading from libreboot 5th release (or lower) to latest, on the X60
cp x60flashfrom5 libreboot_bin/
# X60/T60: so that the user can use libreboot_bin to overwrite lenovo bios with libreboot
cp lenovobios_firstflash libreboot_bin/
cp lenovobios_secondflash libreboot_bin/
# For initial flashing on macbook21/11
cp macbook21_firstflash libreboot_bin/

# ### Create the release tarballs
# ----------------------------------------------------------------------------------------------------------------------------

# Also delete the manifest
rm -f libreboot_src/releasefilelist
rm -f libreboot_bin/releasefilelist
rm -f releasefilelist

# We don't want to encourage development
# to happen on the release archives. 
# Development goes in git.
rm -f libreboot_src/build-release
rm -f libreboot_src/getall
rm -f libreboot_src/getbucts
rm -f libreboot_src/getcb
rm -f libreboot_src/getflashrom
rm -f libreboot_src/getgrub
rm -f libreboot_src/getgrubinvaders
rm -f libreboot_src/getmt86
rm -f libreboot_src/getseabios
rm -f libreboot_src/DEBLOB

echo "Creating compressed libreboot_src release archive"

# create lzma compressed src archive
tar cfJ libreboot_src.tar.xz libreboot_src

echo "Creating compressed libreboot_bin release archive"

# create lzma compressed bin archive
tar cfJ libreboot_bin.tar.xz libreboot_bin

# ### Delete the uncompressed release directories
# ----------------------------------------------------------------------------------------------------------------------------

echo "Deleted the uncompressed release archives"

rm -rf libreboot_src
rm -rf libreboot_bin

echo "DONE. See libreboot_src.tar.xz and libreboot_bin.tar.xz"

# ------------------- DONE ----------------------
